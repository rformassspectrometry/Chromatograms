% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/ChromBackend-functions.R,
%   R/ChromBackend.R
\name{chromData}
\alias{chromData}
\alias{chromData<-}
\alias{chromIndex}
\alias{chromNames}
\alias{chromNames<-}
\alias{chromVariables}
\alias{mzMax}
\alias{mzMax<-}
\alias{mzMin}
\alias{mzMin<-}
\alias{precursorMzMin}
\alias{precursorMzMin<-}
\alias{precursorMzMax}
\alias{precursorMzMax<-}
\alias{productMzMax}
\alias{productMzMax<-}
\alias{productMzMin}
\alias{productMzMin<-}
\alias{selectChromVariables}
\alias{coreChromVariables}
\alias{ChromBackend}
\alias{ChromBackend-class}
\alias{[,ChromBackend-method}
\alias{$,ChromBackend-method}
\alias{$<-,ChromBackend-method}
\alias{backendInitialize,ChromBackend-method}
\alias{chromData,ChromBackend-method}
\alias{chromData<-,ChromBackend-method}
\alias{selectChromVariables,ChromBackend-method}
\alias{peaksData,ChromBackend-method}
\alias{peaksData<-,ChromBackend-method}
\alias{backendMerge,ChromBackend-method}
\alias{backendMerge,list-method}
\alias{chromVariables,ChromBackend-method}
\alias{chromIndex,ChromBackend-method}
\alias{collisionEnergy,ChromBackend-method}
\alias{collisionEnergy<-,ChromBackend-method}
\alias{dataOrigin,ChromBackend-method}
\alias{dataOrigin<-,ChromBackend-method}
\alias{dataStorage,ChromBackend-method}
\alias{dataStorage<-,ChromBackend-method}
\alias{isReadOnly,ChromBackend-method}
\alias{intensity,ChromBackend-method}
\alias{intensity<-,ChromBackend-method}
\alias{isEmpty,ChromBackend-method}
\alias{length,ChromBackend-method}
\alias{lengths,ChromBackend-method}
\alias{msLevel,ChromBackend-method}
\alias{msLevel<-,ChromBackend-method}
\alias{mz,ChromBackend-method}
\alias{mz<-,ChromBackend-method}
\alias{mzMax,ChromBackend-method}
\alias{mzMax<-,ChromBackend-method}
\alias{mzMin,ChromBackend-method}
\alias{mzMin<-,ChromBackend-method}
\alias{peaksVariables,ChromBackend-method}
\alias{precursorMz,ChromBackend-method}
\alias{precursorMz<-,ChromBackend-method}
\alias{precursorMzMin,ChromBackend-method}
\alias{precursorMzMin<-,ChromBackend-method}
\alias{precursorMzMax,ChromBackend-method}
\alias{precursorMzMax<-,ChromBackend-method}
\alias{productMz,ChromBackend-method}
\alias{productMz<-,ChromBackend-method}
\alias{productMzMin,ChromBackend-method}
\alias{productMzMin<-,ChromBackend-method}
\alias{productMzMax,ChromBackend-method}
\alias{productMzMax<-,ChromBackend-method}
\alias{rtime,ChromBackend-method}
\alias{rtime<-,ChromBackend-method}
\alias{split,ChromBackend,ANY-method}
\alias{filterDataOrigin,ChromBackend-method}
\alias{filterDataStorage,ChromBackend-method}
\alias{filterMsLevel,ChromBackend-method}
\alias{filterMzRange,ChromBackend-method}
\alias{filterMzValues,ChromBackend-method}
\title{Chromatographic MS Data Backends}
\usage{
chromData(object, ...)

chromData(object) <- value

chromIndex(object, ...)

chromNames(object, ...)

chromNames(object) <- value

chromVariables(object, ...)

mzMax(object, ...)

mzMax(object) <- value

mzMin(object, ...)

mzMin(object) <- value

precursorMzMin(object, ...)

precursorMzMin(object) <- value

precursorMzMax(object, ...)

precursorMzMax(object) <- value

productMzMax(object, ...)

productMzMax(object) <- value

productMzMin(object, ...)

productMzMin(object) <- value

selectChromVariables(object, ...)

coreChromVariables()

\S4method{[}{ChromBackend}(x, i, j, ..., drop = FALSE)

\S4method{$}{ChromBackend}(x, name)

\S4method{$}{ChromBackend}(x, name) <- value

\S4method{backendInitialize}{ChromBackend}(object, ...)

\S4method{chromData}{ChromBackend}(object, columns = chromVariables(object))

\S4method{chromData}{ChromBackend}(object) <- value

\S4method{selectChromVariables}{ChromBackend}(object, chromVariables = chromVariables(object))

\S4method{peaksData}{ChromBackend}(object, columns = c("rtime", "intensity"))

\S4method{peaksData}{ChromBackend}(object) <- value

\S4method{backendMerge}{ChromBackend}(object, ...)

\S4method{backendMerge}{list}(object, ...)

\S4method{chromVariables}{ChromBackend}(object)

\S4method{chromIndex}{ChromBackend}(object, columns = chromVariables(object))

\S4method{collisionEnergy}{ChromBackend}(object)

\S4method{collisionEnergy}{ChromBackend}(object) <- value

\S4method{dataOrigin}{ChromBackend}(object)

\S4method{dataOrigin}{ChromBackend}(object) <- value

\S4method{dataStorage}{ChromBackend}(object)

\S4method{dataStorage}{ChromBackend}(object) <- value

\S4method{isReadOnly}{ChromBackend}(object)

\S4method{intensity}{ChromBackend}(object)

\S4method{intensity}{ChromBackend}(object) <- value

\S4method{isEmpty}{ChromBackend}(x)

\S4method{length}{ChromBackend}(x)

\S4method{lengths}{ChromBackend}(x)

\S4method{msLevel}{ChromBackend}(object)

\S4method{msLevel}{ChromBackend}(object) <- value

\S4method{mz}{ChromBackend}(object)

\S4method{mz}{ChromBackend}(object) <- value

\S4method{mzMax}{ChromBackend}(object)

\S4method{mzMax}{ChromBackend}(object) <- value

\S4method{mzMin}{ChromBackend}(object)

\S4method{mzMin}{ChromBackend}(object) <- value

\S4method{peaksVariables}{ChromBackend}(object)

\S4method{precursorMz}{ChromBackend}(object)

\S4method{precursorMz}{ChromBackend}(object) <- value

\S4method{precursorMzMin}{ChromBackend}(object)

\S4method{precursorMzMin}{ChromBackend}(object) <- value

\S4method{precursorMzMax}{ChromBackend}(object)

\S4method{precursorMzMax}{ChromBackend}(object) <- value

\S4method{productMz}{ChromBackend}(object)

\S4method{productMz}{ChromBackend}(object) <- value

\S4method{productMzMin}{ChromBackend}(object)

\S4method{productMzMin}{ChromBackend}(object) <- value

\S4method{productMzMax}{ChromBackend}(object)

\S4method{productMzMax}{ChromBackend}(object) <- value

\S4method{rtime}{ChromBackend}(object)

\S4method{rtime}{ChromBackend}(object) <- value

\S4method{split}{ChromBackend,ANY}(x, f, drop = FALSE, ...)

\S4method{filterDataOrigin}{ChromBackend}(object, dataOrigin = character(), ...)

\S4method{filterDataStorage}{ChromBackend}(object, dataStorage = character())

\S4method{filterMsLevel}{ChromBackend}(object, msLevel = integer())

\S4method{filterMzRange}{ChromBackend}(object, mz = numeric(), ...)

\S4method{filterMzValues}{ChromBackend}(object, mz = numeric(), ppm = 20, tolerance = 0, ...)
}
\arguments{
\item{object}{Object extending \code{ChromBackend}.}

\item{...}{Additional arguments.}

\item{value}{replacement value for \verb{<-} methods. See individual
method description or expected data type.}

\item{x}{Object extending \code{ChromBackend}.}

\item{i}{For \code{[}: \code{integer}, \code{logical} or \code{character} to subset the object.}

\item{j}{For \code{[}: ignored.}

\item{drop}{For \code{[}: not considered.}

\item{name}{For \code{$} and \verb{$<-}: the name of the chromatogram variable to
return or set.}

\item{columns}{For \code{chromData} accessor: optional \code{character} with column
names (chromatogram variables) that should be included in the
returned \code{DataFrame}. By default, all columns are returned.}

\item{chromVariables}{For \code{selectChromVariables}: \code{character} with the
names of the chromatogram variables to which the backend should be
subsetted.}

\item{f}{\code{factor} defining the grouping to split \code{x}. See \code{\link[=split]{split()}}.}

\item{dataOrigin}{For \code{filterDataOrigin}: \code{character} to define which
chromatograms to keep.}

\item{dataStorage}{For \code{filterDataStorage}: \code{character} to define which
chromatograms to keep.}

\item{msLevel}{\code{integer} defining the MS level of the chromatograms to which
the function should be applied. For \code{filterMsLevel}: the MS level to
which \code{object} should be subsetted.}

\item{mz}{For \code{filterMz}, \code{filterPrecursorMz} and \code{filterProductMz}:
\code{numeric(2)} defining the lower and upper m/z of the range to subset
\code{object}. Chromatograms with their min m/z (\code{mzMin}, \code{precursorMzMin}
and \code{productMz}, respectively) \strong{or} max m/z within \code{mz} are retained
(filtering thus returns chromatograms \strong{overlapping} the specified m/z
range).}

\item{ppm}{For \code{filterMzValues}: m/z-relative acceptable difference (in
parts-per-million) for m/z values to be considered \emph{matching}.}

\item{tolerance}{For \code{filterMzValues}: largest acceptable absolute
difference in m/z values to consider them \emph{matching}.}
}
\description{
\code{ChromBackend} is a virtual class that defines what different backends need
to provide to be used by the \code{Chromatograms} package and classes.

The backend should provide access to the chromatographic data which mainly
consists of (paired) intensity and retention time values. Additional
chromatographic metadata such as MS level and precursor and product m/z
should also be provided.

Through their implementation different backends can be either optimized for
minimal memory requirements or performance. Each backend needs to implemet
data access methods listed in section \emph{Backend functions:} below.

Currently backend implementations are:
\itemize{
\item \code{ChromBackendMemory}: keeps the full data within the object and hence in
memory. This backend is thus optimized for fast data access, but has the
largest memory footprint.
}
}
\section{Core chromatogram variables}{


The \emph{core} chromatogram variables are variables (metadata) that can/should
be provided by a backend. For each of these variables a value needs to be
returned, if none is defined, a missing value (of the correct data type)
should be returned. The names of the core variables are returned with the
\code{chromVariables} function.

For each core chromatogram variable a dedicated access method exists.

The \code{coreChromVariables} function returns the core chromatogram variables
along with their expected (defined) data type.

The core chromatogram variables (in alphabetical order) are:
\itemize{
\item \code{chromIndex}: an \code{integer} with the index of the chromatogram in the
original source file (e.g. \emph{mzML} file).
\item \code{collisionEnergy}: for SRM data, \code{numeric} with the collision energy of
the precursor.
\item \code{dataOrigin}: optional \code{character} with the origin of a chromatogram.
\item \code{dataStorage}: \code{character} defining where the data is (currently) stored.
\item \code{intensity}: \code{NumericList} with the intensity values of each chromatogram.
\item \code{msLevel}: \code{integer} defining the MS level of the data.
\item \code{mz}: optional \code{numeric} with the (target) m/z value for the
chromatographic data.
\item \code{mzMin}: optional \code{numeric} with the lower m/z value of the m/z range in
case the data (e.g. an extracted ion chromatogram EIC) was extracted from
a \code{Spectra} object.
\item \code{mzMax}: optional \code{numeric} with the upper m/z value of the m/z range.
\item \code{precursorMz}: for SRM data, \code{numeric} with the target m/z of the
precursor (parent).
\item \code{precursorMzMin}: for SRM data, optional \code{numeric} with the lower m/z of
the precursor's isolation window.
\item \code{precursorMzMax}: for SRM data, optional \code{numeric} with the upper m/z of
the precursor's isolation window.
\item \code{productMz} for SRM data, \code{numeric} with the target m/z of the
product ion.
\item \code{productMzMin}: for SRM data, optional \code{numeric} with the lower m/z of
the product's isolation window.
\item \code{productMzMax}: for SRM data, optional \code{numeric} with the upper m/z of
the product's isolation window.
\item \code{rtime}: \code{NumericList} with the retention times of each chromatogram.
retention times are expected to be increasingly sorted.
}
}

\section{Backend functions}{


New backend classes \strong{must} extend the base \code{ChromBackend} class and
implement the following mandatory methods:
\itemize{
\item \code{backendInitialize}: initialises the backend. This method is
supposed to be called right after creating an instance of the
backend class and should prepare the backend.
Parameters can be defined freely for each backend, depending on what is
needed to initialize the backend. It is however suggested to also support
a parameter \code{data} that can be used to submit the full data as a
\code{DataFrame} to the backend. This would allow the backend to be also
usable for the \code{\link[=setBackend]{setBackend()}} function from \code{Chromatograms}.
This method has to ensure to set the spectra variable \code{dataStorage}
correctly.
\item \code{chromData}, \verb{chromData<-}: gets or sets general chromatogram metadata
(annotation).  \code{chromData} returns a \code{DataFrame}, \verb{chromData<-} expects
a \code{DataFrame} with the same number of rows as there are chromatograms in
\code{object}. Note that \code{chromData} has to return the \strong{full} data, i.e.
all core chromatogram variables and also the intensity and retention
time values (as a \code{list} or \code{SimpleList} in columns \code{"intensity"} and
\code{"rtime"}. Read-only backends might not need to implement the
replacement method \verb{chromData<-} (unless some internal caching mechanism
could be used).
\item \code{peaksData}: returns a \code{list} of two-dimensional arrays (\code{matrix} or
\code{data.frame}) with the data (e.g. retention time - intensity pairs) from
each chromatogram. The length of the \code{list} is equal to the number of
chromatograms in \code{object}. For an empty chromatogram a \code{matrix}
with 0 rows and two columns (named \code{"rtime"} and \code{"intensity"}) has to be
returned. The optional parameter \code{columns}, if supported by the backend\verb{allows to define which peak variables should be returned in each array. As default (minimum) columns}"rtime"\code{and}"intensity"` have to be
provided.
\item \verb{peaksData<-} replaces the peak data (rtime and intensity values) of the
backend. This method expects a \code{list} of two dimensional arrays (\code{matrix}
or \code{data.frame}) with columns representing the peak variables. All
existing peaks data is expected to be replaced with these new values. The
length of the \code{list} has to match the number of spectra of \code{object}.
Note that only writeable backends need to support this method.
\item \code{[}: subset the backend. Only subsetting by element (\emph{row}/\code{i}) is
allowed
\item \code{$}, \verb{$<-}: access or set/add a single chromatogram variable (column) in
the backend.
\item \code{selectChromVariables}: reduce \code{object} retaining only specified
chromatogram variables.
\item \code{backendMerge}: merges (combines) \code{ChromBackend} objects into a single
instance. All objects to be merged have to be of the same type.
}

Additional methods that might be implemented, but for which default
implementations are already present are:
\itemize{
\item \code{chromVariables}: returns a \code{character} vector with the
available chromatogram variables (columns, fields or attributes)
available in \code{object}. This should return \strong{all} variables which
are present in \code{object}, also \code{"intensity"} and \code{"rtime"} (which are by
default not returned by the \verb{chromVariables,Chromatograms} method).
\item \code{chromIndex}: returns an \code{integer} vector with the index of the
chromatograms in the original source file.
For this method a default implementation is available and it thus does
not need to be implemented.
\item \code{collisionEnergy}, \verb{collisionEnergy<-}: gets or sets the collision energy
for the precursor (for SRM data). \code{collisionEnergy} returns a \code{numeric} of
length equal to the number of chromatograms in \code{object}.
For this method a default implementation is available and it thus does
not need to be implemented.
\item \code{dataOrigin}, \verb{dataOrigin<-}: gets or sets the \emph{data origin} variable.
\code{dataOrigin} returns a \code{character} of length equal to the number of
chromatograms, \verb{dataOrigin<-} expects a \code{character} of length equal
\code{length(object)}.
For this method a default implementation is available and it thus does
not need to be implemented.
\item \code{dataStorage}, \verb{dataStorage<-}: gets or sets the \emph{data storage} variable.
\code{dataStorage} returns a \code{character} of length equal to the number of
chromatograms in \code{object}, \verb{dataStorage<- } expects a \code{character} of
length equal \code{length(object)}. Note that missing values (\code{NA_character_})
are not supported for \code{dataStorage}.
\item \code{intensity}: gets the intensity values from the chromatograms. Returns
a \code{\link[=NumericList]{NumericList()}} of \code{numeric} vectors (intensity values for each
chromatogram). The length of the list is equal to the number of
chromatograms in \code{object}.
\item \verb{intensity<-}: replaces the intensity values. \code{value} has to be a \code{list}
(or \code{\link[=NumericList]{NumericList()}}) of length equal to the number of chromatograms and the
number of values within each list element identical to the number of
data pairs in each chromatogram. Note that just writeable backends
need to support this method.
\item \code{isReadOnly}: returns a \code{logical(1)} whether the backend is \emph{read
only} or does allow also to write/update data.
\item \code{isEmpty}: returns a \code{logical} of length equal to the number of
chromatograms with \code{TRUE} for chromatograms without any data pairs.
\item \code{length}: returns the number of chromatograms in the object.
\item \code{lengths}: returns the number of data pairs (rtime-intensity values)
per chromatogram.
\item \code{msLevel}: gets the chromatogram's MS level. Returns an \code{integer}
vector (of length equal to the number of chromatograms) with the MS
level for each chromatogram (or \code{NA_integer_} if not available).
\item \code{mz},\verb{mz<-}: gets or sets the m/z value of the chromatograms. \code{mz} returns
a \code{numeric} of length equal to the number of chromatograms in \code{object},
\verb{mz<-} expects a \code{numeric} of length \code{length(object)}.
\item \code{mzMax},\verb{mzMax<-}: gets or sets the upper m/z of the mass-to-charge range
from which the chromatogram contains signal (e.g. if the chromatogram
was extracted from MS data in spectra format and a m/z range was provided).
\code{mzMax} returns a \code{numeric} of length equal to the number of chromatograms
in \code{object}, \code{mzMax} expects a \code{numeric} of length equal to the number
of chromatograms in \code{object}.
\item \code{mzMin},\verb{mzMin<-}: gets or sets the lower m/z of the mass-to-charge range
from which the chromatogram contains signal (e.g. if the chromatogram
was extracted from MS data in spectra format and a m/z range was provided).
\code{mzMin} returns a \code{numeric} of length equal to the number of chromatograms
in \code{object}, \code{mzMin} expects a \code{numeric} of length equal to the number
of chromatograms in \code{object}.
\item \code{peaksVariables}: lists the available data variables for each
chromatogram. Default peak variables are \code{"rtime"} and \code{"intensity"}
(which all backends need to support and provide), but some backends
might provide additional variables.
All these variables are expected to be returned (if requested) by the
\code{peaksData} function.
\item \code{precursorMz},\verb{precursorMz<-}: gets or sets the (target) m/z of the
precursor (for SRM data). \code{precursorMz} returns a \code{numeric} of length
equal to the number of chromatograms in \code{object}. \verb{precursorMz<-} expects
a \code{numeric} of length equal to the number of chromatograms.
\item \code{precursorMzMin},\code{precursorMzMax},\code{productMzMin}, \code{productMzMax}: get
the lower and upper margin for the precursor or product isolation windows.
These functions might return the value of \code{productMz} if the respective
minimal or maximal m/z values are not defined in \code{object}.
\item \code{productMz},\verb{productMz<-}: gets or sets the (target) m/z of the
product (for SRM data). \code{productMz} returns a \code{numeric} of length
equal to the number of chromatograms in \code{object}. \verb{productMz<-} expects
a \code{numeric} of length equal to the number of chromatograms.
\item \code{rtime}: gets the retention times from the chromatograms. returns a
\code{\link[=NumericList]{NumericList()}} of \code{numeric} vectors (retention times for each
chromatogram). The length of the returned list is equal to the number of
chromatograms in \code{object}.
\item \verb{rtime<-}: replaces the retention times. \code{value} has to be a \code{list} (or
\code{\link[=NumericList]{NumericList()}}) of length equal to the number of chromatograms and the
number of values within each list element identical to the number of
data pairs in each chromatogram. Note that just writeable backends support
this method.
\item \code{split}: splits the backend into a \code{list} of backends (depending on
parameter \code{f}). The default method for \code{ChromBackend} uses
\code{\link[=split.default]{split.default()}}, thus backends extending \code{ChromBackend} don't
necessarily need to implement this method.
}

Filter methods:
\itemize{
\item \code{filterDataOrigin}: filters the object retaining chromatograms matching any
of the provided \code{dataOrigin}. Parameter \code{dataOrigin} has to be of type
\code{character} and needs to match exactly the data origin value of the
chromatograms to subset.
\code{filterDataOrigin} should return the data ordered by the provided
\code{dataOrigin} parameter, i.e. if \code{dataOrigin = c("2", "1")} was provided,
the chromatograms in the resulting object should be ordered accordingly
(first chromatogram from data origin \code{"2"} and then from \code{"1"}).
\item \code{filterDataStorage}: filters the object retaining chromatograms matching
any of the provided \code{dataStorage}. Parameter \code{dataStorage} has to be of
type \code{character} and needs to match exactly the data storage value of the
chromatograms to subset.
\code{filterDataStorage} should return the data ordered by the provided
\code{dataStorage} parameter, i.e. if \code{dataStorage = c("2", "1")} was provided,
the chromatograms in the resulting object should be ordered accordingly
(first chromatogram from data storage \code{"2"} and then from \code{"1"}).
\item \code{filterMsLevel}: retains chromatograms of MS level \code{msLevel}.
\item \code{filterMzRange}: retains chromatograms with their m/z within the provided
m/z range.
\item \code{filterMzValues}: retains chromatograms with their m/z matching any of the
provided m/z values (given the provided acceptable differences defined
by parameters \code{tolerance} and \code{ppm}.
}
}

\section{Implementation notes}{


Backends extending \code{ChromBackend} \strong{must} implement all of its methods
(listed above). A guide to create new backend classes is provided as a
dedicated vignette.
}

\examples{

## Create a simple backend implementation
ChromBackendDummy <- setClass("ChromBackendDummy",
    contains = "ChromBackend")
}
\author{
Johannes Rainer, Sebastian Gibb, Laurent Gatto
}
